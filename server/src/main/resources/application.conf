spray.routing {
  file-chunking-threshold-size = 128m
}
spray.can {
  server {
    pipelining-limit = 8
    request-timeout = 500 s
    idle-timeout = 600 s
    parsing {
      max-uri-length = 64k
    }
  }
}

fiddle {
  extLibs = [
    "https://repo1.maven.org/maven2/com/lihaoyi/scalatags_sjs0.6_2.11/0.5.4/scalatags_sjs0.6_2.11-0.5.4.jar",
    "https://repo1.maven.org/maven2/com/lihaoyi/scalarx_sjs0.6_2.11/0.3.1/scalarx_sjs0.6_2.11-0.3.1.jar",
    "https://repo1.maven.org/maven2/org/scala-js/scalajs-dom_sjs0.6_2.11/0.9.0/scalajs-dom_sjs0.6_2.11-0.9.0.jar",
    "https://repo1.maven.org/maven2/org/scala-lang/modules/scala-async_2.11/0.9.5/scala-async_2.11-0.9.5.jar"
  ]

  libCache = "target/extlibs"

  templates = [
    {
      name = "default"
      pre = """
import scalatags.JsDom.all._
import org.scalajs.dom
import fiddle.Page
import Page.{red, green, blue, yellow, orange, println}
import scalajs.js
object ScalaFiddle extends js.JSApp {
  def main() = {
"""
      post = """
  }
}
"""
    },
    {
      name = "imports"
      pre = """
import scalatags.JsDom.all._
import org.scalajs.dom
import fiddle.Page
import Page.{red, green, blue, yellow, orange, println}
import scalajs.js
"""
      post = ""
    },
    {
      name = "main"
      pre = """
import scalatags.JsDom.all._
import org.scalajs.dom
import fiddle.Page
import Page.{red, green, blue, yellow, orange, println}
import scalajs.js
object ScalaFiddle extends js.JSApp {
"""
      post = """
}
"""
    },
    {
      name = "repl"
      pre = """
import scala.reflect.ClassTag
import scalatags.JsDom.all._
import org.scalajs.dom
import fiddle.Page
import Page.{red, green, blue, yellow, orange, println}
import scalajs.js
object ScalaFiddle extends js.JSApp {
  def printResult[T: ClassTag](r: T): Unit = {
    val tpe = implicitly[ClassTag[T]].runtimeClass.getSimpleName
    println(s"res: $tpe = ${r.toString}")
  }

  def main() = {
    printResult(repl())
  }

  def repl() = {
"""
      post = """
  }
}
"""
    },
    {
      name = "raw"
      pre = ""
      post = ""
    }
  ]

  httpHeaders = {
    "X-Frame-Options" = "SAMEORIGIN"
  }
}

